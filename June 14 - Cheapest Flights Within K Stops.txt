Question - https://leetcode.com/explore/challenge/card/june-leetcoding-challenge/540/week-2-june-8th-june-14th/3360/

Logic - 
BFS Steps

Create graph from the flights[][] and store directed edge with cost to reach that stop from previous stop - Map<Integer, List<int[]>>
For BFS take a queue whee we need to store the next stop and the total cost to reach that stop - Queue<int[]>
Start from source stop and visit adjacent stop in bfs way, check
if it is destination update the minPathCost from the currentStop cost.
if there is not path after that stop continue discard that path
Try all the direct stop from the source and check if any stop currentStop cost + flight to that stop cost > minPathCost we can prune that path b/c we already have the minCostPath from some other route.
Check if we crossed k levels/ stops then terminate the loop.

Code -
 BFS: 
 
class Solution {
    
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        int minPathCost = Integer.MAX_VALUE; // initialize the minPathCost with Integer.MAX_VALUE
        Map<Integer, List<int[]>> graph = createGraph(flights); // create graph

        int step = 0;
        Queue<int[]> q = new LinkedList<>(); // save next stop with the cost till that stop
        q.add(new int[]{src, 0});
        while (!q.isEmpty()) {
            int size = q.size();
            for (int i = 0; i < size; i++) {
                int[] currentStop = q.poll();
                if (currentStop[0] == dst)
                    minPathCost = Math.min(minPathCost, currentStop[1]);
                if (!graph.containsKey(currentStop[0])) // if no roots from that stop continue
                    continue;
                for (int[] flight : graph.get(currentStop[0])) {
                    if (currentStop[1] + flight[1] > minPathCost) // cost + current flight cost > minPathCost discard that path ~ pruning
                        continue;
                    q.add(new int[]{flight[0], currentStop[1] + flight[1]});
                }
            }
            if (step++ > K) // once we crossed K stops and not reached to dst break;
                break;
        }

        return minPathCost == Integer.MAX_VALUE ? -1 : minPathCost;
    }
    
    private Map<Integer, List<int[]>> createGraph(int[][] flights) {
        Map<Integer, List<int[]>> graph = new HashMap<>(); // direct stops + cost to reach that stop
        for (int[] flight : flights) {
            graph.putIfAbsent(flight[0], new ArrayList<>());
            graph.get(flight[0]).add(new int[]{flight[1], flight[2]});
        }
        return graph;
    }
}

DFS: 
class Solution {
     int minPathCost;

    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {
        minPathCost = Integer.MAX_VALUE; // initialize the minPathCost with Integer.MAX_VALUE
        Map<Integer, List<int[]>> graph = createGraph(flights); // create graph

        dfs(graph, src, dst, K + 1, 0); // K stop => K + 1 edges
        return minPathCost == Integer.MAX_VALUE ? -1 : minPathCost;
    }
    
    public void dfs(Map<Integer, List<int[]>> graph,int src, int dst, int k,int currentCost) {
        if (k < 0) return; // if covered k stops and not reached destination
        if (src == dst) { // if reached destination currentCost is minPathCost
            minPathCost = currentCost;
            return;
        }
        if(!graph.containsKey(src)){
            return;
        }
        for (int[] flight : graph.get(src)) {
            if (currentCost + flight[1] > minPathCost)
                continue;
            dfs(graph, flight[0], dst, k - 1, currentCost + flight[1]);
        }
    }
    
    
    
    
   private Map<Integer, List<int[]>> createGraph(int[][] flights) {
        Map<Integer, List<int[]>> graph = new HashMap<>(); // direct stops + cost to reach that stop
        for (int[] flight : flights) {
            graph.putIfAbsent(flight[0], new ArrayList<>());
            graph.get(flight[0]).add(new int[]{flight[1], flight[2]});
        }
        return graph;
    }
}